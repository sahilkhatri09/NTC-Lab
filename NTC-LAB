S.
No.
INDEX Page No.
1
Find the multiplicative inverse using extended
Euclidean Algorithm in modulus n
1 - 2
2 Find the inverse of a matrix modulus n 3 - 5
3 Implement Shift Cipher 6
4 Implement Multiplicative Cipher 7
5 Implement Affine Cipher 8
6 Implement Playfair Cipher 9-10
7 Implement Hill Cipher 11
8 Implement Vigenère Cipher 12
9 Implement Rail fence Cipher- Row and Column
transformation
13-14
10 Implement DES algorithm 15-21


1. Find the multiplicative inverse using Extended Euclidean
Algorithm in modulus n
#include <bits/stdc++.h>
using namespace std;
bool isGcd(int a, int b)
{
int r;
while (a % b > 0)
{
r = a % b;
a = b;
b = r;
cout << "a =" << a << "\nb =" << b << "\nr = " << r << endl;
}
if (b == 1)
{
return true;
}
else
{
return false;
}
}
int inverse(int a, int m)
{
for (int i = 1; i < m; ++i)
{
if ((a * i) % m == 1)
{
return i;
}
}
return 0;
}
int main()
{
int value, mod;
cout << "Enter value and mod" << endl;
cin >> value >> mod;
if (isGcd(mod, value))
{
cout << "The multiplicative inverse of " << value << ": " << inverse(value,
mod) << endl;
}
els
e
{
c
o
u
t
<
<
"
N
o
m
ultiplic
a
tiv
e in
v
e
r
s
e!"
<
<
e
n
dl; }return 0; }


2. Inverse of a matrix in Modulo N
#include <bits/stdc++.h>
#include <numeric>
using namespace std;
#define N 4
int gcd(int a, int b)
{
return b == 0 ? a : gcd(b, a % b);
}
int findInverseMod(int b, int n)
{
int t1 = 0;
int t2 = 1;
int r1 = n;
int r2 = b;
while (r2 > 0)
{
int q = r1 / r2;
int r = r1 - q * r2;
int t = t1 - q * t2;
r1 = r2;
r2 = r;
t1 = t2;
t2 = t;
}
if (r1 == 1)
{
t1 = t1 < 0 ? t1 + n : t1;
return t1;
}
return -1;
}
void getCofactor(int A[N][N], int temp[N][N], int p, int q, int n)
{
int i = 0, j = 0;
for (int row = 0; row < n; row++)
{
for (int col = 0; col < n; col++)
{
if (row != p && col != q)
{
temp[i][j++] = A[row][col];
if (j == n - 1)
{
j = 0;
i++;
}
}
}
}
}
int determinant(int A[N][N], int n)
{
int D = 0;
if (n == 1)
return A[0][0];
int temp[N][N];
int sign = 1;
for (int f = 0; f < n; f++)
{
getCofactor(A, temp, 0, f, n);
D += sign * A[0][f] * determinant(temp, n - 1);
sign = -sign;
}
return D;
}
void adjoint(int A[N][N], int adj[N][N])
{
if (N == 1)
{
adj[0][0] = 1;
return;
}
int sign = 1, temp[N][N];
for (int i = 0; i < N; i++)
{
for (int j = 0; j < N; j++)
{
getCofactor(A, temp, i, j, N);
sign = ((i + j) % 2 == 0) ? 1 : -1;
adj[j][i] = (sign) * (determinant(temp, N - 1));
}
}
}
bool inverseMatrix(int A[N][N], int inverse[N][N], int r)
{
int det = determinant(A, N);
if (det == 0)
return false;
if (gcd(det, r) != 1)
return false;
int detInverse = findInverseMod(det, r);
int adj[N][N];
adjoint(A, adj);
for (int i = 0; i < N; i++)
for (int j = 0; j < N; j++)
inverse[i][j] = adj[i][j] * detInverse;
return true;
}
void display(int A[N][N])
{
for (int i = 0; i < N; i++)
{
for (int j = 0; j < N; j++)
cout << A[i][j] << " ";
cout << endl;
}
}
int main()
{
cout<<endl;
int arr[N][N] = {{3, -8, 2, 1},
{1, -5, 2, 4},
{6, 0, 2, 1},
{3, -2, -3, 2}};
int inv[N][N];
cout << "Enter modulus n: ";
int r;
cin >> r;
cout << endl
<< "Input matrix:" << endl;
display(arr);
cout << endl
<< "The Inverse is :" << endl;
if (inverseMatrix(arr, inv, r))
display(inv);
return 0;
}
3. Shift Cipher
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
int main()
{
unordered_map<char, int> map;
for (int i = 0; i < 26; i++)
map[char(97 + i)] = i;
string plaintext;
int n;
int k;
cout << "\n Enter Plaintext: ";
cin >> plaintext;
cout << "\n Enter key value: ";
cin >> k;
string cipher;
for (int i = 0; i < plaintext.size(); i++)
{
int C = (map[plaintext[i]] + k) % 26;
cipher += char(C + 97);
}
cout << "\n Ciphertext: " << cipher;
cout<<endl;
return (0);
}
4. Multiplicative Cipher
#include <bits/stdc++.h>
using namespace std;
int main()
{
map<char, int> map;
for (int i = 0; i < 26; i++)
map[char(97 + i)] = i;
string plain;
int n;
int k;
cout << "\n Enter Plaintext: ";
cin >> plain;
cout << "\n Enter key value: ";
cin >> k;
string cipher;
for (int i = 0; i < plain.size(); i++)
{
int C = (map[plain[i]] * k) % 26;
cipher += char(C + 97);
}
cout << "\n Ciphertext: " << cipher;
cout<<endl;
return 0;
}
5. Affine Cipher
#include <bits/stdc++.h>
using namespace std;
int main()
{
map<char, int> map;
for (int i = 0; i < 26; i++)
map[char(97 + i)] = i;
string plain;
int n;
int k1, k2;
cout << "\n Enter Plaintext: ";
cin >> plain;
cout << "\n Enter key value k1 (multiplication): ";
cin >> k1;
cout << "\n Enter key value k2 (addition): ";
cin >> k2;
string cipher;
for (int i = 0; i < plain.size(); i++)
{
int t = ((map[plain[i]] * k1) + k2) % 26;
cipher += 'a' + t;
}
cout << "\n Ciphertext: " << cipher;
cout<<endl;
}
6.Playfair Cipher using the key as “avengers”
#include <bits/stdc++.h>
#include <unordered_map>
using namespace std;
int main()
{
char key[5][5] =
{
{'a', 'v', 'e', 'n', 'g'},
{'r', 's', 'b', 'c', 'd'},
{'f', 'h', 'i', 'k', 'l'},
{'m', 'o', 'p', 'q', 't'},
{'u', 'w', 'x', 'y', 'z'}};
unordered_map<char, pair<int, int> > map;
for (int i = 0; i < 5; i++)
{
for (int j = 0; j < 5; j++)
map[key[i][j]] = make_pair(i, j);
}
string plain, temp, cipher;
cout << "\n Enter Plain Text: ";
cin >> plain;
for (int i = 0; i < plain.size(); i++)
{
if (plain[i] == 'j')
plain[i] = 'i';
if (i > 0 && plain[i] == plain[i - 1])
temp += 'x';
temp += plain[i];
}
if ((temp.size()) % 2 != 0)
temp += 'x';
for (int t = 0; t < temp.size() - 1; t += 2)
{
int x1 = map[temp[t]].first;
int y1 = map[temp[t]].second;
int x2 = map[temp[t + 1]].first;
int y2 = map[temp[t + 1]].second;
if (x1 == x2)
{
cipher += key[x1][(y1 + 1) % 5];
cipher += key[x1][(y2 + 1) % 5];
}
else if (y1 == y2)
{
cipher += key[(x1 + 1) % 5][y1];
cipher += key[(x2 + 1) % 5][y1];
}
else
{
cipher += key[x1][y2];
cipher += key[x2][y1];
}
}
cout << "\n converted Ciphertext is: " << cipher;
cout<<endl;
return (0);
}
7. Hill Cipher
#include <bits/stdc++.h>
using namespace std;
float encrymatrix[3][1], a[3][3], msg[3][1], m[3][3];
void getKeyMatrix()
{
int i, j;
char mes[3];
cout << "Enter 3x3 matrix for key: " << endl;
for (i = 0; i < 3; i++)
{
for (j = 0; j < 3; j++)
{
cin >> a[i][j];
m[i][j] = a[i][j];
}
}
cout << "\nEnter a string of 3 letter: ";
cin >> mes;
for (i = 0; i < 3; i++)
msg[i][0] = mes[i] - 65;
}
void encrypt()
{
int i, j, k;
for (i = 0; i < 3; i++)
for (j = 0; j < 1; j++)
for (k = 0; k < 3; k++)
encrymatrix[i][j] = encrymatrix[i][j] + a[i][k] *
msg[k][j];
cout << "\nEncrypted string is: ";
for (i = 0; i < 3; i++)
cout << (char)(fmod(encrymatrix[i][0], 26) + 65);
}
int main()
{
getKeyMatrix();
encrypt();
return (0);
}
8. Vignere Cipher
#include <bits/stdc++.h>
#include<unordered_map>
using namespace std;
int main()
{
cout<<endl;
unordered_map<char, int> map;
for (int i = 0; i < 26; i++)
{
map[i + 'a'] = i;
}
string plain, key, cipher;
cout << "Enter Plaintext(a-z) : ";
cin >> plain;
cout << "Enter Key Text(a-z) : ";
cin >> key;
int i = 0, j = 0;
while (i != plain.size())
{
if (j == key.size())
j = 0;
int t = (map[plain[i]] + map[key[j]]) % 26;
char code = t + 'a';
cipher += code;
i++;
j++;
}
cout << "\n Ciphertext: " << cipher;
cout<<endl;
return (0);
}
9. Rail fence - row and column transformation
#include <bits/stdc++.h>
using namespace std;
string encryptRailFence(string text, int key)
{
char rail[key][(text.length())];
for (int i = 0; i < key; i++)
for (int j = 0; j < text.length(); j++)
rail[i][j] = '\n';
bool dir_down = false;
int row = 0, col = 0;
for (int i = 0; i < text.length(); i++)
{
if (row == 0 || row == key - 1)
dir_down = !dir_down;
rail[row][col++] = text[i];
dir_down ? row++ : row--;
}
string result;
for (int i = 0; i < key; i++)
for (int j = 0; j < text.length(); j++)
if (rail[i][j] != '\n')
result.push_back(rail[i][j]);
return result;
}
string decryptRailFence(string cipher, int key)
{
char rail[key][cipher.length()];
for (int i = 0; i < key; i++)
for (int j = 0; j < cipher.length(); j++)
rail[i][j] = '\n';
bool dir_down;
int row = 0, col = 0;
for (int i = 0; i < cipher.length(); i++)
{
if (row == 0)
dir_down = true;
if (row == key - 1)
dir_down = false;
rail[row][col++] = '*';
dir_down ? row++ : row--;
}
int index = 0;
for (int i = 0; i < key; i++)
for (int j = 0; j < cipher.length(); j++)
if (rail[i][j] == '*' && index < cipher.length())
rail[i][j] = cipher[index++];
string result;
row = 0, col = 0;
for (int i = 0; i < cipher.length(); i++)
{
if (row == 0)
dir_down = true;
if (row == key - 1)
dir_down = false;
if (rail[row][col] != '*')
result.push_back(rail[row][col++]);
dir_down ? row++ : row--;
}
return result;
}
int main()
{
cout<<endl;
string text = "avengers assemble", cipher;
int key = 2;
cout << "Plain text: " << text << endl;
cout << "Key: " << key << endl;
cipher = encryptRailFence(text, key);
cout << "\nCipher text: " << cipher << endl;
cout << "Deciphered text: " << decryptRailFence(cipher, key)
<< endl;
cout<<endl;
return 0;
}
10. Implementing DES algorithm
#include <bits/stdc++.h>
#include<unordered_map>
using namespace std;
string hex2bin(string s) { unordered_map<char, string> map; map['0'] =
"0000";
map['1'] = "0001";
map['2'] = "0010";
map['3'] = "0011";
map['4'] = "0100";
map['5'] = "0101";
map['6'] = "0110";
map['7'] = "0111";
map['8'] = "1000";
map['9'] = "1001";
map['A'] = "1010";
map['B'] = "1011";
map['C'] = "1100";
map['D'] = "1101";
map['E'] = "1110";
map['F'] = "1111";
string bin = "";
for (int i = 0; i < s.size(); i++)
{
bin += map[s[i]];
}
return bin;
}
string bin2hex(string s)
{
unordered_map<string, string> map;
map["0000"] = "0";
map["0001"] = "1";
map["0010"] = "2";
map["0011"] = "3";
map["0100"] = "4";
map["0101"] = "5";
map["0110"] = "6";
map["0111"] = "7";
map["1000"] = "8";
map["1001"] = "9";
map["1010"] = "A";
map["1011"] = "B";
map["1100"] = "C";
map["1101"] = "D";
map["1110"] = "E";
map["1111"] = "F";
string hex = "";
for (int i = 0; i < s.length(); i += 4)
{
string ch = "";
ch += s[i];
ch += s[i + 1];
ch += s[i + 2];
ch += s[i + 3];
hex += map[ch];
}
return hex;
}
string permute(string k, int *arr, int n)
{
string per = "";
for (int i = 0; i < n; i++)
{
per += k[arr[i] - 1];
}
return per;
}
string shift_left(string k, int shifts)
{
string s = "";
for (int i = 0; i < shifts; i++)
{
for (int j = 1; j < 28; j++)
{
s += k[j];
}
s += k[0];
k = s;
s = "";
}
return k;
}
string xor_(string a, string b)
{
string ans = "";
for (int i = 0; i < a.size(); i++)
{
if (a[i] == b[i])
{
ans += "0";
}
else
{
ans += "1";
}
}
return ans;
}
string encrypt(string pt, vector<string> rkb, vector<string> rk)
{
pt = hex2bin(pt);
int initial_perm[64] = {58, 50, 42, 34, 26, 18, 10, 2,
60, 52, 44, 36, 28, 20, 12, 4,
62, 54, 46, 38, 30, 22, 14, 6,
64, 56, 48, 40, 32, 24, 16, 8,
57, 49, 41, 33, 25, 17, 9, 1,
59, 51, 43, 35, 27, 19, 11, 3,
61, 53, 45, 37, 29, 21, 13, 5, 63, 55, 47, 39, 31, 23, 15, 7};
pt = permute(pt, initial_perm, 64);
cout << "After initial permutation: " << bin2hex(pt) << endl;
string left = pt.substr(0, 32);
string right = pt.substr(32, 32);
cout << "After splitting: L0=" << bin2hex(left)
<< " R0=" << bin2hex(right) << endl;
int exp_d[48] = {32, 1, 2, 3, 4, 5, 4, 5,
6, 7, 8, 9, 8, 9, 10, 11,
12, 13, 12, 13, 14, 15, 16, 17,
16, 17, 18, 19, 20, 21, 20, 21,
22, 23, 24, 25, 24, 25, 26, 27,
28, 29, 28, 29, 30, 31, 32, 1};
int s[8][4][16] = {{14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,
0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,
4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,
15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13},
{15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,
3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,
0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,
13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9},
{10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8,
13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1,
13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7,
1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12},
{7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15,
13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9,
10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4,
3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14},
{2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9,
14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6,
4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14,
11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3},
{12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11,
10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8,
9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6,
4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13},
{4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1,
13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6,
1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2,
6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12},
{13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7,
1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2,
7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8,
2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11}};
int per[32] = {16, 7, 20, 21,
29, 12, 28, 17,
1, 15, 23, 26,
5, 18, 31, 10,
2, 8, 24, 14,
32, 27, 3, 9,
19, 13, 30, 6,
22, 11, 4, 25};
cout << endl;
for (int i = 0; i < 16; i++)
{
string right_expanded = permute(right, exp_d, 48);
string x = xor_(rkb[i], right_expanded);
string op = "";
for (int i = 0; i < 8; i++)
{
int row = 2 * int(x[i * 6] - '0') + int(x[i * 6 + 5] - '0');
int col = 8 * int(x[i * 6 + 1] - '0') + 4 * int(x[i * 6 + 2] - '0') + 2 * int(x[i * 6
+ 3] - '0') + int(x[i * 6 + 4] - '0');
int val = s[i][row][col];
op += char(val / 8 + '0');
val = val % 8;
op += char(val / 4 + '0');
val = val % 4;
op += char(val / 2 + '0');
val = val % 2;
op += char(val + '0');
}
op = permute(op, per, 32);
x = xor_(op, left);
left = x;
if (i != 15)
{
swap(left, right);
}
cout << "Round " << i + 1 << " " << bin2hex(left) << " "
<< bin2hex(right) << " " << rk[i] << endl;
}
string combine = left + right;
int final_perm[64] = {40, 8, 48, 16, 56, 24, 64, 32,
39, 7, 47, 15, 55, 23, 63, 31,
38, 6, 46, 14, 54, 22, 62, 30,
37, 5, 45, 13, 53, 21, 61, 29,
36, 4, 44, 12, 52, 20, 60, 28,
35, 3, 43, 11, 51, 19, 59, 27,
34, 2, 42, 10, 50, 18, 58, 26,
33, 1, 41, 9, 49, 17, 57, 25};
string cipher = bin2hex(permute(combine, final_perm, 64));
return cipher;
}
int main()
{
cout<<endl;
string pt, key;
pt = "123456ABCD132536";
key = "AABB09182736CCDD";
key = hex2bin(key);
int keyp[56] = {57, 49, 41, 33, 25, 17, 9,
1, 58, 50, 42, 34, 26, 18,
10, 2, 59, 51, 43, 35, 27,
19, 11, 3, 60, 52, 44, 36,
63, 55, 47, 39, 31, 23, 15,
7, 62, 54, 46, 38, 30, 22,
14, 6, 61, 53, 45, 37, 29,
21, 13, 5, 28, 20, 12, 4};
key = permute(key, keyp, 56);
int shift_table[16] = {1, 1, 2, 2,
2, 2, 2, 2,
1, 2, 2, 2,
2, 2, 2, 1};
int key_comp[48] = {14, 17, 11, 24, 1, 5,
3, 28, 15, 6, 21, 10,
23, 19, 12, 4, 26, 8,
16, 7, 27, 20, 13, 2,
41, 52, 31, 37, 47, 55,
30, 40, 51, 45, 33, 48,
44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32};
string left = key.substr(0, 28);
string right = key.substr(28, 28);
vector<string> rkb;
vector<string> rk;
for (int i = 0; i < 16; i++)
{
left = shift_left(left, shift_table[i]);
right = shift_left(right, shift_table[i]);
string combine = left + right;
string RoundKey = permute(combine, key_comp, 48);
rkb.push_back(RoundKey);
rk.push_back(bin2hex(RoundKey));
}
cout << "*****Encryption*****" << endl;
string cipher = encrypt(pt, rkb, rk);
cout << "Cipher Text: " << cipher << endl;
cout << endl
<< "*****Decryption*****" << endl;
reverse(rkb.begin(), rkb.end());
reverse(rk.begin(), rk.end());
string text = encrypt(cipher, rkb, rk);
cout << "Plain Text: " << text << endl;
cout<<endl;
}

